name:  Application deployment
on:
  deployment:

env:
  environments-matrix: "[\"tw-dev\", \"tw-staging\", \"tw-prod\"]"

jobs:
  check-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-environment.outputs.environment }}
      full-environment: ${{ steps.set-environment.outputs.full-environment }}
    steps:
      - name: Set Environment
        id: set-environment
        if: ${{ contains(fromJson(env.environments-matrix), github.event.deployment.environment) }}
        uses: actions/github-script@v3
        with:
          script: |
            const environment = context.payload.deployment.environment.split("-")[1];
            console.log(context.payload.deployment.environment);
            console.log(environment);
            const envMap = { 'dev': 'development', 'staging': 'staging', 'prod': 'production' };
            let fullEnvironment = envMap[environment];
            console.log(fullEnvironment);
            core.setOutput('environment', environment);
            core.setOutput('full-environment', fullEnvironment);

  display-context:
    needs: [check-environment]
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "${{ needs.check-environment.outputs.environment }}"
          echo "${{ needs.check-environment.outputs.full-environment }}"


  deployment-status:
    runs-on: ubuntu-latest
    needs: [check-environment, display-context]
    steps:
      - uses: actions/github-script@v3
        if: ${{ contains(fromJson(env.environments-matrix), github.event.deployment.environment) }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          previews: 'flash-preview,ant-man-preview'
          script: |
            const needs = ${{ toJson(needs) }};
            let deploymentState = Object.entries(needs).reduce((state, jobEntry) => {
              const [job, value] = jobEntry;
              if (state === "failure" || value.result === "failure") return "failure";
              if (state === "error" || value.result === "cancelled") return "error";
              if (value.result === "skipped") return state;
              return state;
            }, "success");
            github.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: deploymentState,
              auto_inactive: true,
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha}/checks`,
              environment: "${{ github.event.deployment.environment }}"
            });
